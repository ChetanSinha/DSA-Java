// https://leetcode.com/problems/leaf-similar-trees/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private void getLeafSequence(TreeNode root, List<Integer> leafSequence) {
        if (root == null) {
            return;
        }

        if (root.left == null && root.right == null) {
            leafSequence.add(root.val);
            return;
        }

        getLeafSequence(root.left, leafSequence);
        getLeafSequence(root.right, leafSequence);
    }

    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> leafSequence1 = new ArrayList<>();
        List<Integer> leafSequence2 = new ArrayList<>();

        getLeafSequence(root1, leafSequence1);
        getLeafSequence(root2, leafSequence2);

        if (leafSequence1.size() != leafSequence2.size()) {
            return false;
        }

        for (int i=0; i<leafSequence2.size(); i++) {
            if (leafSequence2.get(i) != leafSequence1.get(i)) {
                return false;
            }
        }

        return true;
    }
}