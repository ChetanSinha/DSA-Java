// https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/?envType=daily-question&envId=2024-01-10

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


/*
    At each node, one of three cases could exists:
        1. Root is start
        2. Root.left contains start
        3. Root.right contains right
        4. None of above

    MAX_TIME variable will contain the max time to make tree infected after whole operations

    MAX_TIME will need to be updated in three cases:
        - current is start
        - left contains start
        - right contains start


    CASE 1:
        - root (current) is start, max time for current tree (of current node as root) would be max(left height, right height) - update MAX if required
        - return 1, true - 1 for distance from start node (for parent node), true for start is present

    CASE 2:
        - left subtree contains start, there MAX of current tree would be distance from left + distance from right
        - return distance from left (start node) and true

    CASE 3:
        - same as case 2 for right subtree

    CASE 4:
        - pass max height of current tree to parent, and false
*/

class Data {
    int distance;
    boolean startPresent;

    Data(int d, boolean s) {
        this.distance = d;
        this.startPresent = s;
    }
}

class Solution {
    
    int MAX_TIME;

    private Data func(TreeNode root, int start) {
        if (root == null) {
            return new Data(0, false);
        }

        Data left = func(root.left, start);
        Data right = func(root.right, start);

        if (root.val == start) {
            // case 1
            MAX_TIME = Math.max(MAX_TIME, Math.max(left.distance, right.distance));
            return new Data(1, true);
        }

        if (!left.startPresent && !right.startPresent) {
            // case 4 
            return new Data(Math.max(left.distance, right.distance) + 1, false);
        }

        MAX_TIME = Math.max(MAX_TIME, left.distance + right.distance);
        if (left.startPresent) {
            // case 2
            return new Data(left.distance + 1, true);
        }

        // case 3
        return new Data(right.distance + 1, true);
    }

    public int amountOfTime(TreeNode root, int start) {
        MAX_TIME = 0;
        func(root, start);
        return MAX_TIME;
    }
}