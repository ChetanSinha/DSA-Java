// https://leetcode.com/problems/insert-delete-getrandom-o1/?envType=daily-question&envId=2024-01-16


/*
    to get each operation in O(1), we use list and map both.
    list to store elements and map to index fast

    on insert: check on map, insert if not present, add in map
    on delete: check on map, swap the target idx with last element, remove the last index, update the map
    on get random: access random index
*/
class RandomizedSet {
    List<Integer> arr;
    HashMap<Integer, Integer> map;

    public RandomizedSet() {
        arr = new ArrayList<>();
        map = new HashMap<>();
    }
    
    public boolean insert(int val) {
        if (map.containsKey(val)) {
            return false;
        }
        arr.add(val);
        map.put(val, arr.size()-1);
        return true;
    }
    
    public boolean remove(int val) {
        if (!map.containsKey(val)) {
            return false;
        }
        int idx = map.get(val);
        int last = arr.get(arr.size()-1);
        arr.set(idx, last);
        map.put(last, idx);
        map.remove(val);
        arr.remove(arr.size()-1);
        return true;
    }
    
    public int getRandom() {
        Random random = new Random();
        int randomIdx = random.nextInt(arr.size());
        return arr.get(randomIdx);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */