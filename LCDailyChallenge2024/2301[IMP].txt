// https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/?envType=daily-question&envId=2024-01-23


/*
    Solving using bit manipulation:

    the issue with previous approach was, before taking any string, every time we have to check if
    this string has any chars that were present in previously taken strings 
    

    Since we need unique chars, we can use bit manipulation to assign unique integers to a string
    we can take 26 bit number, where each index represent english alphabet

    if a is present in string then 0th bit of 26 bit will be set

    eg: "ab" -> 3, "bc" -> 6

    Now to check if two strings have any duplicate chars we can just use & operator
    if result of & gives > 0 result then that means both strings have a char which is common


    First we need to remove all those strings that itself has duplicate chars

    At last we just need to count total set bits (in result number) to get length of string
*/
class Solution {
    private boolean noDuplicate(String str) {
        int[] arr = new int[26];
        Arrays.fill(arr, 0);
        for (int i=0; i<str.length(); i++) {
            Character chr = str.charAt(i);
            if (arr[chr - 'a'] != 0) {
                return false;
            }
            arr[chr - 'a'] += 1;
        }
        return true;
    }

    private int convertBits(String str) {
        int result = 0;
        for (int i=0; i<str.length(); i++) {
            int setBitIdx = str.charAt(i) - 'a';
            int setBitInt = 1 << setBitIdx;
            result = result | setBitInt;
        }
        return result;
    }

    public static int countSetBits(int num) {
        int count = 0;

        while (num > 0) {
            count += num & 1;
            num >>= 1;
        }

        return count;
    }

    private int func(List<Integer> bits, int idx, int bitsTaken) {
        if (idx >= bits.size()) {
            int ans = countSetBits(bitsTaken); // set bit of bitsTaken will give length of string
            return ans;
        }

        int ans = func(bits, idx+1, bitsTaken);
        if ((bitsTaken & bits.get(idx)) == 0) {
            // bitsTaken | bits.get(idx) -> will give cummulative set bit of both the prev string and this string
            ans = Math.max(ans, func(bits, idx+1, bitsTaken | bits.get(idx))); 
        }

        return ans;
    }
 

    public int maxLength(List<String> arr) {
        List<Integer> bits = new ArrayList<>();

        for (int i=0; i<arr.size(); i++) {
            if (noDuplicate(arr.get(i))) { // remove duplicate chars
                bits.add(convertBits(arr.get(i))); // convert strings to bits
            }
        }
        return func(bits, 0, 0);
    }
}




/*
   Basic take, not take type problem
   except at each step before taking we need to check if we should take it or not
   based on previous strings
*/
class Solution {
    private boolean shouldTake(String strTillNow, String str) {
        int[] arr = new int[26];
        Arrays.fill(arr, 0);

        for (int i=0; i<strTillNow.length(); i++) {
            Character chr = strTillNow.charAt(i);
            if (arr[chr - 'a'] != 0) {
                return false;
            }

            arr[chr - 'a'] += 1;
        }

        for (int i=0; i<str.length(); i++) {
            Character chr = str.charAt(i);
            if (arr[chr - 'a'] != 0) {
                return false;
            }

            arr[chr - 'a'] += 1;
        }

        return true;
    }
 
    private int func(List<String> arr, int idx, String str) {
        if (idx >= arr.size()) {
            return str.length();
        }

        int ans = func(arr, idx+1, str);
        if (shouldTake(str, arr.get(idx))) {
            ans = Math.max(ans, func(arr, idx+1, str + arr.get(idx)));
        }

        return ans;
    }

    public int maxLength(List<String> arr) {
        return func(arr, 0, "");
    }
}