https://leetcode.com/problems/longest-common-subsequence/description/?envType=daily-question&envId=2024-01-25

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length()][str2.length()];

        int maxLen = dp[0][0] = (str1.charAt(0) == str2.charAt(0)) ? 1 : 0;
        for (int i=1; i<dp.length; i++) {
            if (str1.charAt(i) == str2.charAt(0)) {
                dp[i][0] = 1;
            } else {
                dp[i][0] = dp[i-1][0];
            }
            maxLen = Math.max(maxLen, dp[i][0]);
        }

        for (int i=1; i<dp[0].length; i++) {
            if (str1.charAt(0) == str2.charAt(i)) {
                dp[0][i] = 1;
            } else {
                dp[0][i] = dp[0][i-1];
            }
            maxLen = Math.max(maxLen, dp[0][i]);
        }

        for (int i=1; i<dp.length; i++) {
            for (int j=1; j<dp[0].length; j++) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = dp[i-1][j-1]+1;
                } else {
                    dp[i][j] = Math.max(dp[i-1][j-1], Math.max(dp[i-1][j], dp[i][j-1]));
               }
                maxLen = Math.max(maxLen, dp[i][j]);
            }
        }

        return maxLen;
    }
}